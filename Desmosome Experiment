%anonymously declare the intensity function (derivation is in our binder)
p = @(w,a,b) ((cos(a)^2))*((cos(w)).^2) + 2*sin(a)*sin(b)*sin(w)*cos(a)*cos(b) + ((sin(a))^2)*((sin(b))^2)*((sin(w)).^2);
%set of sample alpha angles
alpha = [pi/2,pi/4,pi/8,pi/12,pi/7,pi/5,1.23,0.5,0];
%set of corresponding sample beta angles
beta = [pi/3,pi/9,pi/13,pi/2.3,pi/2,pi/4.5,1.4,0.9,0.16];
%brightness values
brightness = linspace(200,5000,11);
%number of images per data point
images = 10;
%range of omega angles (excitation polarization)
w = linspace(0,1.57,100);
s1 = 'alpha = ';
s2 = 'beta = ';
s3 = ', ';
s4 = 'error = ';
%this shows us what ideal data looks like according to our model
for i = 1:length(alpha) %for each alpha/beta combination
    subplot(3,3,i)    
    plot(w,p(w,alpha(i),beta(i)), 'b', 'LineWidth', 2) %plot p vs w, keeping alpha and beta constant
    xlabel('Omega')
    ylabel('Excitation')
    A = num2str(alpha(i));
    B = num2str(beta(i));
    alphaString = strcat(s1,A);
    betaString = strcat(s2,B);
    title(strcat(alphaString,s3,betaString))
    axis([0 2 0 1])
end
dataAngles = linspace(0,pi/2,10); %sample omegas, or the excitation polarizations we choose
trueomega = zeros(length(alpha), length(dataAngles)); %rows are a fixed alpha/beta combo, columns are omegas
for g = 1:length(alpha) %update matrix with values
    for h = 1:length(dataAngles)
        trueomega(g,h) = p(dataAngles(h),alpha(g),beta(g)); %expected values for data 
    end
end
for l = 1:length(brightness) %one figure per brightness value
    hFig = figure(l+1);
    set(hFig, 'Position', [0 0 1300 1100])
    for n = 1:length(alpha) %generate subplots in one figure
        omega = zeros(length(alpha), length(dataAngles)); %rows are a fixed alpha/beta combo, columns are omegas
        for j = 1:length(alpha)
            for k = 1:length(dataAngles)
                omega(j,k) = mean(poissrnd(brightness(l)*p(dataAngles(k),alpha(j),beta(j)),1,images)); %simulate "noise" with Poisson Dist average 
            end
        end
        errormatrix = (omega - brightness(l)*trueomega).^2; %error calculation is discrete
        error = sqrt(sum(errormatrix(n,:))); %standard deviation = sqrt(variance)
        subplot(3,3,n)
        pp = spline(dataAngles, omega(n,:));
        plot(w, ppval(pp,w),'b', 'LineWidth',2) %use a spline to approximate p then plot
%         [breaks,coefs,l,k,d] = unmkpp(pp); %break apart spline, integrate to find avg val of function
%         totalsum = 0;
%         for v = 1:length(breaks)-1 %for each break point
%             result = polyint(coefs(v,:));
%             %iteratively sum each individual sum between breakpoints
%             totalsum = totalsum + (polyval(result, breaks(v+1))-polyval(result, breaks(v))); 
%         end
%         avgval = (2/pi)*totalsum;
%         hline = refline([0 avgval]); %average "straight line"
%         hline.Color = 'r';
        xlabel('Omega')
        ylabel('Intensity')
        A = num2str(alpha(n));
        B = num2str(beta(n));
        E = num2str(error);
        alphaString = strcat(s1,A);
        betaString = strcat(s2,B);
        errorString = strcat(s4,E);
        title(strcat(alphaString,s3,betaString))
        legend(errorString, 'Location', 'southeast')
        axis([0 2 0 1*brightness(l)])
    end
end
%Implement the "straight line test" which will test whether certain
%orientations of ordered proteins (constant alpha and beta) can be reasonably differentiated
%from unordered proteins (random assortment of alpha and beta will yield a
%straight line overall). This can be done with simple hypothesis testing
%assuming the normal distribution.
%What percentage of alpha and beta orientation combinations among all
%possible combinations pass the straight line test, with and without noise?
%If there is ordering, then what percentage of our measurements should we
%expect not to reflect this? e.g. 5-10% are "unideal"
%Things we can still vary:
%Noise (# of photons)
%# of measurements
%# of data points (excitation polarization)
